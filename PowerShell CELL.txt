PowerShell CELL
* Create & upload a .zip file that includes folders set up for each iteration

0. About this course: If your work tasks are repetitive, time-consuming, involve the use of Office programs, and/or complicated, then this course will most likely be very beneficial for you. Scripting is a powerful skill that can massively improve work performance:
		(a) A task that has been automated frees up the person/people previously assigned to the task to work on other tasks.
		(b) A computer will complete the task more accurately (and faster) than the people previously assigned to the task, assuming the script is written correctly and well.
	Here is a real example from my personal experience where I found scripting to be a highly appropriate solution: During the last week of each month, my team would have to download an average of ~360 spreadsheets of wirecenter data, each usually containing at least 100,000 rows. We had to format each spreadsheet to follow our template (add 5 columns & their headers, apply conditional formatting to a column, color the left and right halves of the table, etc.), rename the file to follow our naming convention, create a folder using the wirecenter's CLLI, and then move the spreadsheet into the folder. This task was split up between the 9 of us to complete throughout the week and consuming between 3-6 work hours for each person (27 hrs/month at best, 54 hrs/month at worst). The script I wrote to perform this task only required us to download the wirecenter Excel files, and from there it only took 2-4 hours to complete the rest of the task.

I. Setup

	A. Download & Installation
	- get from Teams group files
		- need admin privileges to install via MSI, request here: http://intranet.att.com/elrws/index.php
	- if not compatible, get from https://software.it.att.com/

	B. Environment
	- PowerShell refers to both Windows' command-line shell program and the scripting language
		- Command-line shell: A shell is a program that provides an interface between the user and computer.
			- For example, we can use a shell to:
				- Manipulate files and directories (directories = folders) create, delete, copy, move, edit, etc.*
				- Start and stop processes and programs
				- Manage our system's environment variables
				- A combination of these and more to automate tasks
			- Windows computers come with two default shell programs:
				- Command Prompt: Older, basic/bare bones
					- Can open by pressing Windows key and entering "cmd"
				- PowerShell: Powerful, feature-rich, extensible
					- Can open a PowerShell terminal by pressing the Windows key and entering "Windows PowerShell"
		- Scripting language: A scripting language is a class of programming languages; they are typically used to modify and/or automate tasks on a system.
			- PowerShell scripts are essentially a set of commands written in a text file and saved with a ".ps1" extension.
	- For the first couple of iterations, it will be very helpful to have a PowerShell terminal open on the side. This way, you can run the commands from the exercises and experiment with different inputs. For later iterations, we will also need to use a text editor, like Notepad or Notepad++, to create and edit our scripts.
		- The program that we will use in this course is Windows PowerShell ISE (Integrated Scripting Environment), and we recommend that you do, too. Windows PowerShell ISE is simply a PowerShell terminal docked next to a text editor to allow for quick creating, editing, testing, and debugging of PowerShell scripts. It also comes with debugging tools and keyboard shortcuts to facilitate the scripting process. Finally, because it is made specifically for PowerShell, the interface is much simpler than other IDEs (Integrated Development Environment) and will let us focus on learning PowerShell.
		- If you would like to use a different editor for any reason, that is completely okay (next best recommendation is Visual Studio Code). You can even write and edit your scripts in Notepad/Notepad++ and run them using a regular PowerShell terminal.
		- Let us begin by familiarizing ourselves with the PowerShell ISE.
			- Console
				- The console pane contains an instance of PowerShell, most likely running PowerShell version 5.1. Here, you can enter commands on the command-line and run them by pressing enter; any output will be displayed directly under your input after the command runs, and then a new command-line will appear underneath to receive your next input.
				- You will probably see something like "PowerShell PS C:\Users\<your-attuid>>" on the left-hand side of the console; this is your "working directory" -- it indicates where your shell is performing actions from (where it's "working"). If you try to run a program or create files without specifying their file paths, then PowerShell will look for the program or create the file in your current working directory. By default, the working directory will be your user folder when opening a PowerShell terminal; if running as administrator, then the working directory will be C:\Windows\System32.
					- We can change our working directory by using the `cd` command (change directory), followed by a path. For example, `cd "C:\Users\ka7462\OneDrive - AT&T Services, Inc"` will change my directory to my OneDrive folder.
				- Another feature provided by the ISE is called Intellisense (Hotkey Ctrl+Space). Intellisense is a helpful tool that suggests commands and displays command information; for example, if you type "Get-" into the console and then press Ctrl+Space, you should see Intellisense's context window. You can use the arrow keys to navigate up and down the list to view different commands, and if you hover over a command, another popup should appear displaying the command parameters (which we will discuss in more detail in the next section).
			- Script Pane
				- This pane is essentially a text editor. We can write scripts and also use the ISE's debugging tools here.
			- Commands Add-On
				- This pane shows us all the commands available to the instance of PowerShell running in the ISE. If we were to add any additional commands through modules (which we will discuss later in iteration 5), then the module and its commands would appear here.

II. Introduction

	A. Variables
	- In PowerShell, variables are prefixed with a dollar sign $.
		- Ex: `$some_variable`, `$input`, `$Folder5`
	- Creating a variable and assigning a value to it is very simple:
		- Ex: `$Number1 = 1`, `$Company = "ATT"`
	- Each time that we start a new PowerShell session, PowerShell will automatically create and update a set of variables to store information about the session; these are called Automatic Variables (https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-7.4). It's important to know about Automatic Variables because we should refrain from changing these values ourselves -- however, accessing these variables and their values and using them in our scripts is perfectly fine.
		- Let's take a look at the variables in our session by entering the cmdlet `Get-Variable` into our console. Our output should have two columns: the variable names on the left, and their respective values on the right. Pick a few variables and access their values individually by inputting the variable into the console.
			- Ex: `$HOME`, `$PWD` ("print working directory"), `$PSVersionTable`
	
	B. Data Types

		In PowerShell, there are many different data types (https://learn.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-04?view=powershell-7.4). In this course, we'll go over the basic data types that you should know, which should be enough to use PowerShell practically.

		0. Object
		- Almost everything in PowerShell is an object. Objects are data entities that have properties (variables; describes characteristics of the object) and methods (functions; mechanism for interacting with the object). Many commands actually produce objects as their output.
		- Let's look at an object. To do this, we will use a command that produces object-based output and assign it to a variable. In the console, enter `$myFolder = Get-ChildItem`.
			- `Get-ChildItem` is a cmdlet (more on cmdlets in the next section) that gets the contents of a specified folder (the current working directory if path is unspecified) and outputs it to the console.
			- Enter `$myFolder` into the console; we should see the files and folders that are in your working directory, which should be your user folder by default, along with some metadata, such as LastWriteTime or Length (i.e. size, in bytes).
			- As mentioned before, $myFolder is now an object that we can interact with, meaning we can get its properties and use methods on it. To access its properties or call (use) its methods, we use a dot after the object followed by the name of the property or method that we'd like to use. Let's run `$myFolder.gettype()` in the console, which calls the `GetType()` method of the object. The output tells us that our variable's type is Object[].
				- Note the parentheses after `.GetType()`. This is how methods are written in PowerShell; properties do not have parentheses.
		
		i. Booleans, Integers, Doubles, Strings
			- The following data types are very commonly used:

				a. Boolean: 
					
				b. Integers: 

				c. Double: 

				d. Strings: The string data type is essentially just text. We can create strings with either single or double quotes (' or "). Create a variable called `myString` and assign it to a string value:
					Ex: $myString = "some text"
					To verify that our variable `$myString` is of type [String], let's enter `$myString.GetType()` in our console.
					
					What if we have ; to do so, 

		ii. Arrays, Hashtables

	C. Cmdlets
		- Cmdlets are commands that can be sent to PowerShell to execute. They follow a <verb>-<noun> naming convention, like "Get-ChildItem" or "Import-Csv". You can find a standard list of commands that comes with PowerShell here: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/?view=powershell-7.4 (Under "Reference" on the left-hand side. Commands are grouped by category)
		- We can try entering a command now in the console pane. Try typing Get-ChildItem and pressing enter. Your output should be the contents of your user folder.
		- Cmdlets typically have parameters that you can execute them with in order to customize your command. Let's try passing some parameters into the Get-ChildItem command. Type Get-ChildItem (or press the up arrow to copy the last command entered), and then press Ctrl+Space. After a couple seconds, you should see a context window appear with the parameters that Get-ChildItem accepts.
			- The parameters are listed after the command. Each parameter is enclosed with square brackets []
				- The first word is the parameter name, prefixed with a dash (-) and enclosed with another set of square brackets. The second word is the data type that the parameter accepts
	
		i. Simple Cmdlet
		
		ii. Cmdlets with Parameters

		iii. Pipeline


III. Control Flow

	A. If

	B. For, While

	C. Break, Continue, Return

IV. Functions

	A. Custom Functions

V. Script Modules

Extra Resources: https://ss64.com/ps/