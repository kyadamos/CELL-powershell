PowerShell CELL
* Create & upload a .zip file that includes folders set up for each iteration

I. Setup

	A. Download & Installation
	- get from Teams group files
		- need admin privileges to install via MSI, request here: http://intranet.att.com/elrws/index.php
	- if not compatible, get from https://software.it.att.com/

	B. Environment
	- Windows PowerShell Integrated Scripting Environment (ISE) is basically a PowerShell terminal combined with a text editor like Notepad to allow for quick creating, editing, testing, and debugging of PowerShell scripts. It also comes with debugging tools and hotkeys to facilitate the creation process.
		- We will use PowerShell ISE as our development environment in this course, but you can use any editor (e.g. Visual Studio Code) that you prefer. You can even develop your scripts in Notepad/Notepad++ if you'd like.
		- Let us start by familiarizing ourself with the PowerShell ISE.
			- Console
				- The console pane contains an instance of PowerShell, most likely running the latest supported version of PowerShell on your machine (5.1). Here, you can run commands and see your output.
				- You will probably see something like "PowerShell PS C:\Users\<your-attuid>>" on the left-hand side of the console, indicating that your current working directory is currently in your user folder.
				- Another feature provided by the ISE is called Intellisense (Hotkey Ctrl+Space). Intellisense is a helpful tool that suggests commands and displays command information; for example, if you type "Get-" into the console and then press Ctrl+Space, you should see Intellisense's context window. You can use the arrow keys to navigate up and down the list to view different commands, and if you hover over a command, another popup should appear displaying the command parameters (which we will discuss in more detail in the next section).
			- Script Pane
				- This pane is essentially a text editor. We can write scripts and also use the ISE's debugging tools here.
			- Commands Add-On
				- This pane shows us all the commands available to the instance of PowerShell running in the ISE. If we were to add any additional commands through modules (which we will discuss later in iteration 5), then the module and its commands would appear here.

II. Introduction

	A. Data Types
		In PowerShell, there are many different data types (https://learn.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-04?view=powershell-7.4). In this course, we'll go over the basic data types that you should know, which should be enough to use PowerShell practically.
		0. Object
		- Everything in PowerShell is, at their roots, an object. Objects are data entities that have properties (variables; describes characteristics of the object) and methods (functions; mechanism for interacting with the object).
		- Let's look at an object. In the console pane of the ISE, run this line `Get-ChildItem`. This command gets the contents of your working directory (unless you changed it, your user folder) and outputs it to your console; you should see the files and folders that are in your user folder, along with metadata of each item, such as LastWriteTime or Length (i.e. size, in bytes).
			- We can capture the output of the command by surrounding it in parentheses, like this `(Get-ChildItem)` -- this is now an object that we can interact with, meaning we can get its properties and use methods on it. To access its properties or call its methods, we use a dot after the object and the name of the property or method that we'd like to use. Let's run `(Get-ChildItem).gettype()`, which calls the `GetType()` method of the object.
		i. Strings, Integers, Booleans

		ii. Arrays, Objects

	B. Cmdlets
		- Cmdlets are commands that can be sent to PowerShell to execute. They follow a <verb>-<noun> naming convention, like "Get-ChildItem" or "Import-Csv". You can find a standard list of commands that comes with PowerShell here: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/?view=powershell-7.4 (Under "Reference" on the left-hand side. Commands are grouped by category)
		- We can try entering a command now in the console pane. Try typing Get-ChildItem and pressing enter. Your output should be the contents of your user folder.
		- Cmdlets typically have parameters that you can execute them with in order to customize your command. Let's try passing some parameters into the Get-ChildItem command. Type Get-ChildItem (or press the up arrow to copy the last command entered), and then press Ctrl+Space. After a couple seconds, you should see a context window appear with the parameters that Get-ChildItem accepts.
			- The parameters are listed after the command. Each parameter is enclosed with square brackets []
				- The first word is the parameter name, prefixed with a dash (-) and enclosed with another set of square brackets. The second word is the data type that the parameter accepts
	
		i. Simple Cmdlet
		
		ii. Cmdlets with Parameters

		iii. Pipeline


III. Control Flow

	A. If

	B. For, While

	C. Break, Continue, Return

IV. Functions

	A. Custom Functions

V. Script Modules
