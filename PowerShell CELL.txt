PowerShell CELL
* Create & upload a .zip file that includes folders set up for each iteration

I. Setup

	A. Download & Installation
	- get from Teams group files
		- need admin privileges to install via MSI, request here: http://intranet.att.com/elrws/index.php
	- if not compatible, get from https://software.it.att.com/

	B. Environment
	- PowerShell refers to both Windows' command-line shell program and the scripting language
		- Command-line shell: A shell is a program that provides an interface between the user and computer.
			- For example, we can use a shell to:
				- Create files and directories (create, delete, copy, move, edit, etc.)
				- Start and stop processes and programs
				- Manage our system's environment variables
				- A combination of these and more to automate tasks
			- Windows computers come with two default shell programs:
				- Command Prompt: Older, basic/bare bones
					- Can open by pressing Windows key and entering "cmd"
				- PowerShell: Powerful, feature-rich, extensible
					- Can open a PowerShell terminal by pressing the Windows key and entering "Windows PowerShell"
		- Scripting language: A scripting language is a class of programming languages; they are typically used to modify and/or automate tasks on a system.
	- For the first couple of iterations, it will be very helpful to have a PowerShell terminal open to the side. This way, you can run the commands from the exercises and experiment with different inputs. For later iterations, we will also need to use a text editor, like Notepad/Notepad++, to create and edit our scripts.
		- We will be using the Windows PowerShell ISE throughout this course, and we recommend that you do, too. Windows PowerShell Integrated Scripting Environment (ISE) is simply a PowerShell terminal docked next to a text editor to allow for quick creating, editing, testing, and debugging of PowerShell scripts. It also comes with debugging tools and hotkeys to facilitate the scripting process. Finally, because it is made specifically for PowerShell, the interface is much simpler than other IDEs and will let us focus on learning PowerShell.
		- If you would like to use a different editor for any reason, that is completely fine (e.g. Visual Studio Code). You can even write and edit your scripts in Notepad/Notepad++ and run them using a regular PowerShell terminal.
		- Let us begin by familiarizing ourselves with the PowerShell ISE.
			- Console
				- The console pane contains an instance of PowerShell, most likely running the latest supported version of PowerShell on your machine (5.1). Here, you can enter commands on the command-line and run them by pressing enter; any output will be displayed directly under your input, and then a new command-line will appear underneath to receive your next input.
				- You will probably see something like "PowerShell PS C:\Users\<your-attuid>>" on the left-hand side of the console, indicating that your current working directory is currently in your user folder.
				- Another feature provided by the ISE is called Intellisense (Hotkey Ctrl+Space). Intellisense is a helpful tool that suggests commands and displays command information; for example, if you type "Get-" into the console and then press Ctrl+Space, you should see Intellisense's context window. You can use the arrow keys to navigate up and down the list to view different commands, and if you hover over a command, another popup should appear displaying the command parameters (which we will discuss in more detail in the next section).
			- Script Pane
				- This pane is essentially a text editor. We can write scripts and also use the ISE's debugging tools here.
			- Commands Add-On
				- This pane shows us all the commands available to the instance of PowerShell running in the ISE. If we were to add any additional commands through modules (which we will discuss later in iteration 5), then the module and its commands would appear here.
		

II. Introduction

	A. Data Types

		In PowerShell, there are many different data types (https://learn.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-04?view=powershell-7.4). In this course, we'll go over the basic data types that you should know, which should be enough to use PowerShell practically.

		0. Object
		- Almost everything in PowerShell is, at their roots, an object. Objects are data entities that have properties (variables; describes characteristics of the object) and methods (functions; mechanism for interacting with the object).
		- Let's look at an object. To do this, we will use a command to get the contents of our working directory (the path displayed in the console), and we will assign the output to a variable.
			- `Get-ChildItem` is a cmdlet (more on cmdlets in the next section) that gets the contents of your working directory and outputs it to your console.
			- In PowerShell, variables are prefixed with a dollar sign $. Ex: `$some_variable`, `$input`, `$Folder5`
			- In the console, let's create a variable called myFolder and assign it to the output of the Get-ChildItem cmdlet. Run the following line in the console: `$myFolder = Get-ChildItem`. When assigning a variable, the console will not display any output -- we can access the output of an assigned variable by inputting the variable through the command-line. Enter `$myFolder` into the console; we should see the files and folders that are in your working directory, which should be your user folder by default, along with some metadata, such as LastWriteTime or Length (i.e. size, in bytes).
			- As mentioned before, $myFolder is now an object that we can interact with, meaning we can get its properties and use methods on it. To access its properties or call (use) its methods, we use a dot after the object followed by the name of the property or method that we'd like to use. Let's run `$myFolder.gettype()` in the console, which calls the `GetType()` method of the object. The output tells us that our variable's type is Object[].
				- Note the parentheses after `.GetType()`. This is how methods are written in PowerShell; properties do not have parentheses.
		
		i. Strings, Integers, Double, Booleans
			- The following data types are very commonly used:

			a. Strings: The string data type is essentially just text. We can create strings with either single or double quotes ' or ".

		ii. Arrays, Hashtables

	B. Cmdlets
		- Cmdlets are commands that can be sent to PowerShell to execute. They follow a <verb>-<noun> naming convention, like "Get-ChildItem" or "Import-Csv". You can find a standard list of commands that comes with PowerShell here: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/?view=powershell-7.4 (Under "Reference" on the left-hand side. Commands are grouped by category)
		- We can try entering a command now in the console pane. Try typing Get-ChildItem and pressing enter. Your output should be the contents of your user folder.
		- Cmdlets typically have parameters that you can execute them with in order to customize your command. Let's try passing some parameters into the Get-ChildItem command. Type Get-ChildItem (or press the up arrow to copy the last command entered), and then press Ctrl+Space. After a couple seconds, you should see a context window appear with the parameters that Get-ChildItem accepts.
			- The parameters are listed after the command. Each parameter is enclosed with square brackets []
				- The first word is the parameter name, prefixed with a dash (-) and enclosed with another set of square brackets. The second word is the data type that the parameter accepts
	
		i. Simple Cmdlet
		
		ii. Cmdlets with Parameters

		iii. Pipeline


III. Control Flow

	A. If

	B. For, While

	C. Break, Continue, Return

IV. Functions

	A. Custom Functions

V. Script Modules

Extra Resources: https://ss64.com/ps/