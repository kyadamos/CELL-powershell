II. Introduction

	A. Cmdlets
		- Preinstalled/default PowerShell commands are called "cmdlets"; they are small-sized commands that perform a specific action on a specific resource*. Cmdlets follow the <verb>-<noun> naming convention, where:
			- The <verb> comes from a list of predefined [verbs](https://learn.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7.4). This naming convention eliminates synonymous verbs from entering the command pool, which makes it much easier for us to find commands once we become a little bit more familiar with the possible verbs. For instance, if we are trying to delete a resource, then we can refer to the verb list and realize that the command we are looking for begins with `Remove` -- we don't have to waste time searching for commands that begin with `Delete`, `Eliminate`, or `Erase`.
			- The <noun> is the resource that we are performing the action (our <verb>) on. For example, `Get-Verb` will retrieve all the predefined PowerShell verbs.
				Ex: Execute the `Get-Verb` cmdlet by typing the command into PowerShell and then pressing Enter. We could also try out the code completion feature, Intellisense, by entering only the first few characters of the `Get-Verb` command, and then pressing `ctrl + space` to display Intellisense's predictions.
				Ex: Try out the `Get-Help` cmdlet.
		i. Parameters
			- 

					- Your output for the `Get-Help` command should be a sizeable text wall about how to use the `Get-Help` command.
			-  We can also use the `Get-Verb` cmdlet to see the list of approved verbs and their definitions, and if we want to see all the commands, then we can use the `Get-Command` cmdlet. Try it out yourself:
			Ex: `Get-Verb`
			Ex: `Get-Command`

			*In the context of PowerShell, "resource" is the abstracted term for any component/entity that can be managed with PowerShell. A folder, a file, a process/application, a virtual machine -- all of these could be considered a resource because we can perform actions on them using PowerShell
			- We can also find all of PowerShell's cmdlets in the documentation: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/?view=powershell-7.4 (Under "Reference" on the left-hand side, grouped by category).
		 - All cmdlets follow PowerShell's <verb>-<noun> naming convention (e.g. "Get-ChildItem", "Write-Host"), in which the verb comes from a pre-approved list of carefully defined verbs (defined here: ).
	

			-  PowerShell terminal: open up PowerShell in your IDE, type `Get-ChildItem`, and then run it by pressing Enter.
				- The `Get-ChildItem` cmdlet will display the contents of the current working directory; if you haven't changed your directory since opening up PowerShell, then that should be your user folder "C:\Users\<your-username>"+
				- By the way, a good rule of thumb is: Never run a shell script/command if you don't know what it does. Make sure you read through each line and look up any commands that you are unfamiliar with -- even just one line could totally brick your system... or worse (e.g. compromise company data)
				

		ii. Cmdlets with Parameters
			- What if we wanted to get the contents of a different folder, or what if we wanted to get othem with in order to customize your command.
			- The parameters are listed after the command. Each parameter is enclosed with square brackets []
				- The first word is the parameter name, prefixed with a dash (-) and enclosed with another set of square brackets. The second word is the data type that the parameter acceptsLet's try passing some parameters into the Get-ChildItem command. Type Get-ChildItem (or press the up arrow to copy the last command entered), and then press Ctrl+Space. After a couple seconds, you should see a context window appear with the parameters that Get-ChildItem accepts.

		iii. Pipeline
		

	B. Variables
	- In PowerShell, variables are prefixed with a dollar sign $.
		- Ex: `$some_variable`, `$input`, `$Folder5`
	- Creating a variable and assigning a value to it is very simple -- we just set them equal to each other. To see their values, we can just enter them into the console.
		- Ex: 
			`$Number1 = 1`
			`$Number1`

			`$Company = "ATT"`
			`$Company`

	- There are a few different ways to see all the variables in our session; the simplest is by passing the cmdlet `Get-Variable`. We can also pass a variable name (without the $) in quotes along with the cmdlet to get the value of just that variable.
		- Ex:
			`Get-Variable`

			`Get-Variable "Number1"`
<#
	- In a filepath "C:\Users\ka7462", the "C:\" indicates the drive that the subdirectories ".\Users\ka7462" are saved in. PowerShell organizes its data in a very similar way to a file system. Data is grouped according to their type and then stored in what is called a "provider" (https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_providers?view=powershell-7.4) -- for instance, there is a FileSystem provider to store files and directories, a Variable provider to store all PowerShell Variables, and a Function provider to store any Functions that we create in the current session. We can interact with a provider or its contents just like we interact with a file system drive:
		- Ex:
			`Get-Item` we can just write : any PowerShell variables that you create are saved in the `Variables:\` provider, the Function provider (i.e. , Functions) calls them "providers" .  
		- Ex:
			`
			
#>
	*There are some variables that PowerShell will automatically create and maintain called Automatic Variables (https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-7.4); it's important to know about Automatic Variables because we should refrain from changing these values ourselves.
		- There are a few ways to get the names and values of assigned variables in our shell. One way is by entering the cmdlet `Get-Variable` into our console. Our output should have two columns: the variable names on the left, and their respective values on the right. Select a few variables and access their values individually by inputting the variable into the console.
			- Ex: `$HOME`, `$PWD` ("print working directory"), `$PSVersionTable`

	**We can also access and interact with Environment Variables (https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-7.4#powershell-environment-variables), which are used to store data about the system environment (e.g. computer name, username, paths to certain files & directories, etc.).
		- PowerShell considers Environment Variables different from PowerShell variables and therefore stores their data in separate providers (PowerShell data bins separated by type). `Get-Variable` only displays variables from the Variable provider `Variable:\`, while the Environment Variables are saved in the Environment provider `Env:\`.
		- In order to display the Environment Variables, we can run the command 

	C. Data Types

		In PowerShell, there are many different data types (https://learn.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-04?view=powershell-7.4). In this course, we'll go over the basic data types that you should know, which should be enough to use PowerShell practically.

		0. Objects
		- Almost everything in PowerShell is an object. Objects are data entities that have properties (variables; describes characteristics of the object) and methods (functions; mechanism for interacting with the object). Many commands actually produce objects as their output.
		- Let's look at an object. To do this, we will use a command that produces object-based output and assign it to a variable. In the console, enter `$myFolder = Get-ChildItem`.
			- `Get-ChildItem` is a cmdlet (more on cmdlets in the next section) that gets the contents of a specified folder (the current working directory if path is unspecified) and outputs it to the console.
			- Enter `$myFolder` into the console; we should see the files and folders that are in your working directory, which should be your user folder by default, along with some metadata, such as LastWriteTime or Length (i.e. size, in bytes).
			- As mentioned before, $myFolder is now an object that we can interact with, meaning we can get its properties and use methods on it. To access its properties or call (use) its methods, we use a dot after the object followed by the name of the property or method that we'd like to use. Let's run `$myFolder.gettype()` in the console, which calls the `GetType()` method of the object. The output tells us that our variable's type is Object[].
				- Note the parentheses after `.GetType()`. This is how methods are written in PowerShell; properties do not have parentheses.
		
		
		i. Booleans, Integers, Doubles, Strings
			- The following data types are very commonly used:

				a. Boolean: A boolean is a data type whose value is either true or false.
					- We will interact with booleans most frequently when comparing values, e.g. the statement "$IntA -gt $IntB" states that some integer-type variable `$IntA` is greater than some other integer-type variable `$IntB`

					
				b. Integers: Integers are whole numbers.


				c. Doubles: Doubles are decimals.


				d. Strings: The string data type is essentially just text. We can create strings with either single or double quotes (' or "). Create a variable called `myString` and assign it to a string value:
					Ex: `$myString = "some text"`
					- To verify that our variable `$myString` is of type [String], let's enter `$myString.GetType()` in our console.
					- If we wanted to specify a filepath for a command, then we would pass that filepath as a string as well. For instance, in the line, `Get-ChildItem "C:\Users"`, we are telling PowerShell to output the contents of a directory. However, this time we have specified that we want the contents of the directory located at the path `"C:\Users"`, which we have passed as a string.
					- What if we wanted part of the string to change depending on the value of some variable? For example, imagine we've written a script that gets the files and directories in our \Downloads directory, (which is by default located inside of our user folder) -- we know that it will contain a line similar to `Get-ChildItem "C:\Users\<your-username>\Downloads"`. However, if we shared this script with our coworkers, then the script would fail because it will be looking for your username in their PC.
						- We can solve this problem by including a variable as part of the string.

		ii. Arrays, Hashtables
			- 

		iii. Casting
			- 
