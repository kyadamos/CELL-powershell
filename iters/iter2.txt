II. Introduction

	A. Cmdlets
		i. Basic Usage
			- Preinstalled/default PowerShell commands are called "cmdlets"; they are small-sized commands that perform a specific action on a specific resource*. Cmdlets follow the <verb>-<noun> naming convention, where:
				- The <verb> comes from a list of predefined [verbs](https://learn.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7.4). This naming convention eliminates synonymous verbs from entering the command pool, which makes it much easier for us to find commands once we become a little bit more familiar with the pool of approved verbs. For instance, if we are trying to delete a resource, then we can refer to the verb list and realize that the command we are looking for begins with `Remove` -- we don't have to waste time searching for commands that begin with `Delete-`, `Eliminate-`, or `Erase-`.
				- The <noun> is the resource that we are performing the action (our <verb>) on. For example, `Get-Verb` is a cmdlet that retrieves all the predefined PowerShell verbs. For the `Import-Csv` cmdlet, the csv file itself is the resource that we are interacting with. In `Get-Variable`, variable is our noun, so variables are the specific resources that this cmdlet interacts with.
					
					Ex: Execute the `Get-Verb` cmdlet by typing the command into PowerShell and then pressing Enter. We could also try out the code completion feature, Intellisense, by entering only the first few letters of the `Get-Verb` command, and then pressing `ctrl + space` to display Intellisense's predictions.

					Ex: Try out the `Get-Help` and `Get-Command` cmdlets.
						- When Get-Help is run without any parameters (parameters explained in next subsection), the output will be a string that describes how to use PowerShell's Help System.
						- When Get-Command is run without any parameters, the output will be an array object of all of the commands that you can use.
							- We can also find all of PowerShell's cmdlets in the documentation: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/?view=powershell-7.4 (Under "Reference" on the left-hand side, grouped by category).
					
					Ex: Execute the `Get-ChildItem` cmdlet.
						- When the Get-ChildItem cmdlet is run without any parameters, the output will be an array object of the files and folders in your current directory. If you haven't changed your directory since opening up PowerShell, then your current directory should be your user folder "C:\Users\<your-username>"

				*In the context of PowerShell, a "resource" is an abstract term for any component/entity that can be managed with PowerShell. A folder, a file, a process/application, a virtual machine -- all of these could be considered a resource because we can perform actions on them using PowerShell
				

		ii. Cmdlets with Parameters
			- What if we wanted `Get-Command` to output only commands that end with "Item"? What if we wanted `Get-ChildItem` to show the contents of a different folder, and then only show us the folders (ignoring the files)?
			- Parameters are parts of a command or cmdlet that offer the user a way to be more specific with their command inputs. We use parameters by typing them after a command preceded with a hyphen (-), and then followed by an argument (value for the parameter):

				Ex: `Get-ChildItem -Path "C:\Program Files"`: In this line of code, "C:\Program Files" is our argument for the `Path` parameter of the `Get-ChildItem` cmdlet. In other words, we're running Get-ChildItem at the path "C:\Program Files", which will output the files and directories inside the "C:\Program Files" directory.

				Ex: `Get-ChildItem -Directory -Path "C:\Users\ka7462"`: This line of code will retrieve only the subdirectories from the directory at "C:\Users\ka7462" (If you want to run this line, make sure to change "ka7462" to your own username). Notice how there is no argument following the `Directory` parameter...
					- For `Get-ChildItem`, the `Directory` parameter is a special kind of parameter called a "switch parameter": these are either True or False (i.e. "On" or "Off", like a light switch). In PowerShell, switch parameters are conventionally "off", and they are "switched on" by including the parameter when running the command.

				Ex: `Get-Command -Name "*Item"`: This line of code will retrieve all of the commands available to you that end in "Item". Notice the asterisk (*) before "Item" -- some parameters accept wildcards. You can read more here: https://learn.microsoft.com/en-us/powershell/scripting/developer/cmdlet/supporting-wildcard-characters-in-cmdlet-parameters?view=powershell-7.4

			- When starting out, it'd be really nice if we could see which parameters are available for us when entering a command that is new to us. We can use Intellisense to get PowerShell to show us which parameters are available:
				- In PowerShell, type `Get-ChildItem -` (don't run it yet) and then activate Intellisense with `ctrl + space`. Directly under your input, PowerShell should show you the set of parameters that are available for your command; navigate through them with arrow keys and press enter to add the highlighted parameter to your input line. Under this set of parameters, PowerShell should also display usage tips for the highlighted parameter -- the word preceding the parameter is the data type that PowerShell will accept as an argument.
					- For instance, if we highlight the Path parameter, then we should see "[string[]] Path" at the bottom, which means that PowerShell will accept a string as our argument, like "C:\Program Files" or "C:\Users\ka7462"
					- If we highlight the Depth parameter, then we'll see "[uint] Depth" at the bottom, meaning PowerShell is expecting us to send a number (e.g. 1, 3, 6, etc.) as an argument
					- And if we highlight the Directory parameter, we can see that this is a "[switch]" parameter like we discussed earlier, so PowerShell will not expect an argument after this parameter.

	B. Variables
	- In PowerShell, variables are prefixed with a dollar sign $.
		- Ex: `$some_variable`, `$input`, `$Folder5`
	- Creating a variable and assigning a value to it is very simple -- we just set them equal to each other. To see their values, we can just enter them into the console.

		- Ex: Set a variable called Number1 equal to the value 1.
			`$Number1 = 1`
			`$Number1`
			
			Assign a variable called Company to the value "ATT".
			`$Company = "ATT"`
			`$Company`

	- There are a few different ways to see all the variables in our session; the simplest is by passing the cmdlet `Get-Variable`. We can also pass a variable name (without the $) in quotes along with the cmdlet to get the value of just that variable.
		- Ex:
			`Get-Variable`

			`Get-Variable "Number1"`
<#
	- In a filepath "C:\Users\ka7462", the "C:\" indicates the drive that the subdirectories ".\Users\ka7462" are saved in. PowerShell organizes its data in a very similar way to a file system. Data is grouped according to their type and then stored in what is called a "provider" (https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_providers?view=powershell-7.4) -- for instance, there is a FileSystem provider to store files and directories, a Variable provider to store all PowerShell Variables, and a Function provider to store any Functions that we create in the current session. We can interact with a provider or its contents just like we interact with a file system drive:
		- Ex:
			`Get-Item` we can just write : any PowerShell variables that you create are saved in the `Variables:\` provider, the Function provider (i.e. , Functions) calls them "providers" .  
		- Ex:
			`
			
#>
	*There are some variables that PowerShell will automatically create and maintain called Automatic Variables (https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-7.4); it's important to know about Automatic Variables because we should refrain from changing these values ourselves.
		- There are a few ways to get the names and values of assigned variables in our shell. One way is by entering the cmdlet `Get-Variable` into our console. Our output should have two columns: the variable names on the left, and their respective values on the right. Select a few variables and access their values individually by inputting the variable into the console.
			- Ex: `$HOME`, `$PWD` ("print working directory"), `$PSVersionTable`

	**We can also access and interact with Environment Variables (https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-7.4#powershell-environment-variables), which are used to store data about the system environment (e.g. computer name, username, paths to certain files & directories, etc.).
		- PowerShell considers Environment Variables different from PowerShell variables and therefore stores their data in separate providers (PowerShell data bins separated by type). `Get-Variable` only displays variables from the Variable provider `Variable:\`, while the Environment Variables are saved in the Environment provider `Env:\`.
		- In order to display the Environment Variables, we can run the command 

	C. Data Types

		In PowerShell, there are many different data types (https://learn.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-04?view=powershell-7.4). In this course, we'll go over the basic data types that you should know, which should be enough to use PowerShell practically.

		i. Booleans, Integers, Doubles, Strings
			- The following data types are very commonly used:

				a. Boolean: A boolean is a data type whose value is either true or false.
					- We will interact with booleans most frequently when comparing values, e.g. the statement "$IntA -gt $IntB" states that some integer-type variable `$IntA` is greater than some other integer-type variable `$IntB`

					Ex: $true.gettype()

					
				b. Integers: Integers are whole numbers.
					Ex: (1).Gettype()


				c. Doubles: Doubles are decimal numbers.
					Ex: (1.0).Gettype()


				d. Strings: The string data type is essentially just text. We can create strings with either single or double quotes (' or "). Create a variable called `myString` and assign it to a string value:

					Ex: `$myString = "some text"`

					- If we wanted to specify a filepath for a command, then we would pass that filepath as a string as well. For instance, in the line, `Get-ChildItem "C:\Users"`, we are telling PowerShell to output the contents of a directory at the path "C:\Users". However, this time we have specified that we want the contents of the directory located at the path `"C:\Users"`, which we have passed as a string.
					- What if we wanted part of the string to change depending on the value of some variable? For example, imagine we've written a script that gets the files and directories in our \Downloads directory, (which is by default located inside of our user folder) -- we know that it will contain a line similar to `Get-ChildItem "C:\Users\<your-username>\Downloads"`. However, if we shared this script with our coworkers, then the script would fail because it will be looking for your username in their PC.
						- We can solve this problem by including a variable as part of the string.

		ii. Collections
			- The following data structures can contain multiple data items within them (though they don't have to, e.g. you can have an empty array), and the elements do not necessarily have to be of the same type:
			a. Arrays: Arrays are data structures that store multiple elements. They are ideal if we have to:
				- store multiple elements of the same type
				- access the elements by index
				- iterate over the elements in order
				
				There are multiple ways to create arrays. The simplest way is to just assign a variable to a set of values
				Ex: `$Array = (1, 2, 3)`

				i. Accessing elements


			b. Hashtables: Hashtables are data structures that store "key-value" pairs; they are also known as dictionaries. These are ideal when we have to:
				- store multiple elements of differing types
				- access them by keys
				- insert and remove elements frequently

				Ex:


		iii. Casting
			- 

		0. Objects
		- Almost everything in PowerShell is an object. Objects are data entities that have properties (variables; describes characteristics of the object) and methods (functions; mechanism for interacting with the object). Many commands actually produce objects as their output.
		- Let's look at an object. To do this, we will use a command that produces object-based output and assign it to a variable. In the console, enter `$myFolder = Get-ChildItem`.
			- `Get-ChildItem` is a cmdlet (more on cmdlets in the next section) that gets the contents of a specified folder (the current working directory if path is unspecified) and outputs it to the console.
			- Enter `$myFolder` into the console; we should see the files and folders that are in your working directory, which should be your user folder by default, along with some metadata, such as LastWriteTime or Length (i.e. size, in bytes).
			- As mentioned before, $myFolder is now an object that we can interact with, meaning we can get its properties and use methods on it. To access its properties or call (use) its methods, we use a dot after the object followed by the name of the property or method that we'd like to use. Let's run `$myFolder.gettype()` in the console, which calls the `GetType()` method of the object. The output tells us that our variable's type is Object[].
				- Note the parentheses after `.GetType()`. This is how methods are written in PowerShell; properties do not have parentheses.
		